name: Deploy Express Servers

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Install Chrome dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            gconf-service \
            libasound2 \
            libatk1.0-0 \
            libc6 \
            libcairo2 \
            libcups2 \
            libdbus-1-3 \
            libexpat1 \
            libfontconfig1 \
            libgbm1 \
            libgcc1 \
            libgconf-2-4 \
            libgdk-pixbuf2.0-0 \
            libglib2.0-0 \
            libgtk-3-0 \
            libnspr4 \
            libpango-1.0-0 \
            libpangocairo-1.0-0 \
            libstdc++6 \
            libx11-6 \
            libx11-xcb1 \
            libxcb1 \
            libxcomposite1 \
            libxcursor1 \
            libxdamage1 \
            libxext6 \
            libxfixes3 \
            libxi6 \
            libxrandr2 \
            libxrender1 \
            libxss1 \
            libxtst6 \
            ca-certificates \
            fonts-liberation \
            libappindicator1 \
            libnss3 \
            lsb-release \
            xdg-utils \
            wget \
            xvfb 
      - name: Checkout main repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_TOKEN }}  # Use your GitHub token here

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Clone private repositories
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          git clone https://${GH_TOKEN}@github.com/locionic/kaaforward-vtt.git repo1
          git clone https://${GH_TOKEN}@github.com/locionic/kaaforward-api.git repo2
          # git clone https://${GH_TOKEN}@github.com/your-org/repo3.git repo3

      - name: Install dependencies and start servers
        run: |
          # Server 1
          cd repo1
          npm install
          node api/index.js &
          cd ..

          # Server 2
          cd repo2
          npm install
          node api/index.js &
          cd ..

          # Server 3
          # cd repo3
          # npm install
          # PORT=3002 npm run dev &
          # cd ..

      - name: Get public IP
        id: ip
        run: |
          PUBLIC_IP=$(curl -s https://api.ipify.org)
          echo "PUBLIC_IP=${PUBLIC_IP}" >> $GITHUB_ENV

      - name: Create tunnel with ngrok
        env:
          NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
        run: |
          wget https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-linux-amd64.tgz
          tar xvzf ngrok-v3-stable-linux-amd64.tgz
          ./ngrok authtoken $NGROK_AUTH_TOKEN
          ./ngrok http --log=stdout 80 > ngrok.log &
          sleep 5
          NGROK_URL=$(curl -s http://localhost:4040/api/tunnels | jq -r .tunnels[0].public_url)
          echo "NGROK_URL=$NGROK_URL" >> $GITHUB_ENV
          echo "Your services are accessible at: $NGROK_URL"

      - name: Setup nginx reverse proxy
        run: |
          sudo apt-get update
          sudo apt-get install -y nginx
          sudo tee /etc/nginx/sites-available/default > /dev/null << 'EOF'
          server {
              listen 80;
              server_name _;

              location /app1 {
                  proxy_pass http://localhost:3000;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host $host;
                  proxy_cache_bypass $http_upgrade;
              }

              location /app2 {
                  proxy_pass http://localhost:3003;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host $host;
                  proxy_cache_bypass $http_upgrade;
              }

              # location /app3 {
              #     proxy_pass http://localhost:3005;
              #     proxy_http_version 1.1;
              #     proxy_set_header Upgrade $http_upgrade;
              #     proxy_set_header Connection 'upgrade';
              #     proxy_set_header Host $host;
              #     proxy_cache_bypass $http_upgrade;
              # }
          }
          EOF

          sudo systemctl restart nginx

      - name: Configure firewall
        run: |
          sudo ufw allow 80/tcp
          sudo ufw allow 443/tcp
          sudo ufw --force enable

      - name: Display access information
        run: |
          echo "Server is accessible at: http://${{ env.PUBLIC_IP }}"
          echo "Configure your domain to point to this IP: ${{ env.PUBLIC_IP }}"
          echo "Access your services at:"
          echo "- http://your-domain.com/app1"
          echo "- http://your-domain.com/app2"
          echo "- http://your-domain.com/app3"

      - name: Keep alive
        run: |
          echo "Services are accessible at: $NGROK_URL"
          echo "app1: $NGROK_URL/app1"
          echo "app2: $NGROK_URL/app2"
          # echo "app3: $NGROK_URL/app3"
          sleep 1h
