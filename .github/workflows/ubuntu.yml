name: WF DEF

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Install Chrome dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            gconf-service \
            libasound2 \
            libatk1.0-0 \
            libc6 \
            libcairo2 \
            libcups2 \
            libdbus-1-3 \
            libexpat1 \
            libfontconfig1 \
            libgbm1 \
            libgcc1 \
            libgconf-2-4 \
            libgdk-pixbuf2.0-0 \
            libglib2.0-0 \
            libgtk-3-0 \
            libnspr4 \
            libpango-1.0-0 \
            libpangocairo-1.0-0 \
            libstdc++6 \
            libx11-6 \
            libx11-xcb1 \
            libxcb1 \
            libxcomposite1 \
            libxcursor1 \
            libxdamage1 \
            libxext6 \
            libxfixes3 \
            libxi6 \
            libxrandr2 \
            libxrender1 \
            libxss1 \
            libxtst6 \
            ca-certificates \
            fonts-liberation \
            libappindicator1 \
            libnss3 \
            lsb-release \
            xdg-utils \
            wget \
            xvfb 
          sudo apt-get install -y \
            libgconf-2-4 \
            libatk1.0-0 \
            libatk-bridge2.0-0 \
            libgdk-pixbuf2.0-0 \
            libgtk-3-0 \
            libgbm-dev \
            libnss3-dev \
            libxss-dev \
            fonts-liberation \
            libappindicator3-1 \
            libx11-xcb1 \
            xdg-utils \
            libxcomposite1 \
            libxcursor1 \
            libxdamage1 \
            libxi6 \
            libxtst6 \
            libxrandr2 \
            libasound2 \
            libxss1 \
            libxshmfence1
      - name: Checkout main repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_TOKEN }}  # Use your GitHub token here

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      # - name: Setup PHP
      #   uses: shivammathur/setup-php@v2
      #   with:
      #     php-version: '8.1'

      - name: Get public IP
        id: ip
        run: |
          PUBLIC_IP=$(curl -s https://api.ipify.org)
          echo "PUBLIC_IP=${PUBLIC_IP}" >> $GITHUB_ENV

      # - name: Create tunnel with ngrok
      #   env:
      #     NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
      #   run: |
      #     wget https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-linux-amd64.tgz
      #     tar xvzf ngrok-v3-stable-linux-amd64.tgz
      #     ./ngrok authtoken $NGROK_AUTH_TOKEN
      #     ./ngrok http --log=stdout 80 > ngrok.log &
      #     sleep 5
      #     NGROK_URL=$(curl -s http://localhost:4040/api/tunnels | jq -r .tunnels[0].public_url)
      #     echo "NGROK_URL=$NGROK_URL" >> $GITHUB_ENV
      #     echo "Your services are accessible at: $NGROK_URL"

      - name: Create tunnel with clf
        env:
          CLOUDFLARE_TOKEN: ${{ secrets.CLOUDFLARE_TOKEN }}
        run: |
          curl -L --output cloudflared.deb https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb
          sudo dpkg -i cloudflared.deb
          sudo cloudflared service install $CLOUDFLARE_TOKEN
          sleep 10
          # You might want to verify the connection
          # sudo cloudflared tunnel info

      - name: Setup nginx reverse proxy
        run: |
          sudo apt-get update
          sudo apt-get install -y nginx
          sudo apt-get install -y php8.1-fpm php8.1-mysql php8.1-curl php8.1-gd php8.1-mbstring php8.1-xml php8.1-zip

          # # Configure PHP-FPM
          # sudo sed -i 's/user = www-data/user = runner/g' /etc/php/8.1/fpm/pool.d/www.conf
          # sudo sed -i 's/group = www-data/group = runner/g' /etc/php/8.1/fpm/pool.d/www.conf
          # sudo sed -i 's/listen.owner = www-data/listen.owner = runner/g' /etc/php/8.1/fpm/pool.d/www.conf
          # sudo sed -i 's/listen.group = www-data/listen.group = runner/g' /etc/php/8.1/fpm/pool.d/www.conf

          # # Start PHP-FPM
          # sudo systemctl start php8.1-fpm
          
          sudo tee /etc/nginx/sites-available/default > /dev/null << 'EOF'
          server {
              listen 80;
              server_name _;
              root /var/www/html;
              index index.php index.html;

              # PHP application under /php-app
              location /php-app {
                  alias /var/www/html/php-app;
                  try_files $uri $uri/ /php-app/index.php?$args;

                  location ~ \.php$ {
                      include snippets/fastcgi-php.conf;
                      fastcgi_param SCRIPT_FILENAME $request_filename;
                      fastcgi_pass unix:/run/php/php8.1-fpm.sock;
                  }
              }

              location /app1 {
                  proxy_pass http://localhost:3001;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host $host;
                  proxy_cache_bypass $http_upgrade;
              }

              location /app2 {
                  proxy_pass http://localhost:3003;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host $host;
                  proxy_cache_bypass $http_upgrade;
              }

              location /app3 {
                  proxy_pass http://localhost:3005;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host $host;
                  proxy_cache_bypass $http_upgrade;
              }

            #   location ~ ^/php(/.*\.php)$ {
            #     proxy_pass http://localhost:8000$1$is_args$args;
            #     proxy_http_version 1.1;
            #     proxy_set_header Upgrade $http_upgrade;
            #     proxy_set_header Connection 'upgrade';
            #     proxy_set_header Host $host;
            #     proxy_cache_bypass $http_upgrade;
            # }
            # PHP files handling
              # location /php {
              #     root /home/runner/work/abcd/abcd/php;
              #     index index.php;
              #     location ~ \.php$ {
              #         include snippets/fastcgi-php.conf;
              #         fastcgi_pass unix:/var/run/php/php8.1-fpm.sock;
              #         fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
              #         include fastcgi_params;
              #     }
              # }
          }
          EOF

          sudo systemctl restart nginx
          sudo systemctl restart php8.1-fpm

      - name: Clone private repositories
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          git clone https://${GH_TOKEN}@github.com/locionic/kaaforward-vtt.git repo1
          git clone https://${GH_TOKEN}@github.com/locionic/kaaforward-api.git repo2
          git clone https://${GH_TOKEN}@github.com/locionic/kaaforward-imgs.git repo3
          git clone https://${GH_TOKEN}@github.com/locionic/kaaforward-php.git php-app

      - name: Install dependencies and start servers
        run: |
          # Server 1
          cd repo1
          npm install
          node api/index.js &
          cd ..

          # Server 2
          cd repo2
          npm install
          node api/index.js &
          cd ..

          # Server 3
          cd repo3
          npm install
          npm run start &
          cd ..

          # Server php
          # php -S localhost:8000 -t php/ &
          # Move PHP app to web root
          sudo mv php-app /var/www/html/
          sudo chown -R www-data:www-data /var/www/html/php-app

      - name: Configure firewall
        run: |
          sudo ufw allow 80/tcp
          sudo ufw allow 443/tcp
          sudo ufw --force enable

      - name: Display access information
        run: |
          echo "Server is accessible at: http://${{ env.PUBLIC_IP }}"
          echo "Configure your domain to point to this IP: ${{ env.PUBLIC_IP }}"
          echo "Access your services at:"
          echo "- http://your-domain.com/app1"
          echo "- http://your-domain.com/app2"
          # echo "- http://your-domain.com/app3"

      - name: Create PHP test file
        run: |
          sudo tee /var/www/html/php-app/index.php > /dev/null << 'EOF'
          <?php
          header('Content-Type: application/json');
          echo json_encode([
              'status' => 'success',
              'message' => 'PHP is working!',
              'php_version' => phpversion(),
              'server_time' => date('Y-m-d H:i:s')
          ]);
          EOF

      - name: Monitor logs
        # timeout-minutes: 120
        run: |
          tail -f /var/log/nginx/access.log /var/log/nginx/error.log ngrok.log &
          sleep 2h
          

      # - name: Keep alive
      #   run: |
      #     echo "Services are accessible at: $NGROK_URL"
      #     echo "app1: $NGROK_URL/app1"
      #     echo "app2: $NGROK_URL/app2"
      #     # echo "app3: $NGROK_URL/app3"
      #     # echo "php: $NGROK_URL/php"
      #     sleep 1h
